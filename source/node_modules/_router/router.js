'use strict'
/* CONCEPT: Router
    A Router is a stream

    - It has maybe some control methods and initial config params
    - It takes in current URL param and maybe other stuff
    - It spits out vtree

    // @IDEA: really?
    // Component(db, engine) seems to show something different
    // ....

    // vtree can then be piped into different engines,
    // e.g. vtre2dom engine
*/
/****************************************************************************
  STACK
****************************************************************************/
const routes     = require('routes')
const singlepage = require('single-page')
const catchlinks = require('catch-links')
// const stream  = require('stream-browserify')
const stream     = require('readable-stream')

const { h, hsvg } = require('_h')
/****************************************************************************
  CUSTOM
****************************************************************************/
const defined    = require('defined')
const WINDOW     = require('global/window')

var router$      = void 0

module.exports = ROUTER
// <protocol>//<host>[:<port>]/<pathname>[<hash>][<search>]
//       ^        ^                ^
//       |        |                |
//     http://www.mediaevent.de/eineseite

// @TODO: https://www.npmjs.com/package/stream-router

// Singleton router$
function ROUTER (db, urlRouting, dataRouting) {
  // @TODO: var pagehandler = require('pagehandler')
  // @TODO: pagehandler (req, res) { ...???... }
  function pagehandler (href, page) {
    // catchLinks(window, function cb (href) { })
    // => grab all relative anchor tags "href" attributes and fire cb(href)
    //
    // var showPage = singlePage(cb, opts)
    // => handle PUSH STATE EVENTS
    // => fires cb(href, page) once
    //   => location.href = href
    // showPage(href) => fires cb(href, page) again
    //   => location.href = href
////////////////////////////////////////////////////////////

// @IDEA: think about this more.
// the value is already lesson, so probably components should ignore it, BUT how to go back in "video time"?
// ...maybe interact with a more proper video player component

// so the URL or LOCATION stays, but not the TIME
////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////

if (window !== window.parent) { // IFRAME => URL REWRITE
  /////////////////////////////////////////////////////
  // alert('IN IFRAME')
// navigation { type:'navigate', key: 'location', val: 'window.location'}

// window.addEventListener('message', receiveMessage)
// window.addEventListener('popstate', function (event) {
//   alert('iframe popstate')
//   console.log(event)
//   debugger
//   var msg = { type: 'domain', value: 'esova' }
//   window.parent.postMessage(msg, '*')
// })
// function receiveMessage(event) {
//   alert('iframe receives message')
//   console.log(event)
//   debugger
//   // event.origin
//   // document.domain
//   // event.originalEvent.origin !== "http://example.org:8080"
//   // window.parent.location.protocol
// }
// //   var path = window.parent.location.pathname
// //   var hash = window.parent.location.hash
// //   var parentHref = path+hash
// //   if (parentHref !== '/') href = parentHref

  // alert('href BEFORE rewrite: ' + href)
  var regex = /\/public\/browser\/?(index\.html)?/
  var protocol = window.location.protocol
  if (protocol === 'file:') {
    if (href === '/public/browser' || href === '/public/browser/index.html') {
      window.history.replaceState(null, href, href)
      href = '/'
      window.parent.history.replaceState(null, href, href)
    } else if (href === '/') {
      window.parent.history.replaceState(null, href, href)
      href = '/public/browser'
      window.history.replaceState(null, href, href)
    } else {
      window.parent.history.replaceState(null, href, href)
      href = '/public/browser'
      window.history.replaceState(null, href, href)
    }
  } else if (protocol !== 'file:') {
    // debugger
    // if (href === '/public/browser' || href === '/public/browser/index.html') {
    //   window.history.replaceState(null, href, href)
    //   href = '/'
    //   window.parent.history.replaceState(null, href, href)
    // } else if (href === '/') {
    //   window.parent.history.replaceState(null, href, href)
    //   href = '/public/browser'
    //   window.history.replaceState(null, href, href)
    // } else {
    //   window.parent.history.replaceState(null, href, href)
    //   href = '/public/browser'
    //   window.history.replaceState(null, href, href)
    // }
  }
  // alert('href AFTER rewrite: ' + href)
} else { // loaded first class
  // alert('IN ROOT WINDOW')
}
window.onpopstate = function (event) {
  console.log(window.location)
  console.log(event)
}
window.onhashchange = function (event) {
  console.log(window.location)
  console.log(event)
}


// alert('PARENT: ' + window.parent.location.pathname)
// alert('ME: ' + window.location.pathname)
// setTimeout(function () {
//   alert('PARENT: ' + window.parent.location.pathname)
//   alert('ME: ' + window.location.pathname)
// },2500)


////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////
    if (href === '/#lesson')

    var route = router.match(href)
    route.href = href // === pathname
    route.page = page // e.g. scroll posotion page.x, page.y
    // e.g. http://localhost:5000/:param1/:param2/*splat
    // route = {
    //   params  : { param1: '...', param2: '...' },
    //   splats  : ['*splat'],
    //   route   : '/',
    //   next    : function next () {}
    //   fn      : function routeHandler() {}
    // }
    // @TODO: keep history undo/redo navigation
    db.put('history/location', JSON.stringify({
      type: 'location',
      key: href,
      value: route
      // RENDER PAGE => HANDLE PAGE & STATE CHANGE
    }), function () {
      if (route) route.fn()
    })
    // route ? route.fn() : render404()
    //route.fn(STATE) // SINGLE RESPONSIBILITY + DRY
      // I try to only pass in the information that a route directly needs,
      // since that keeps the code less coupled to my application.
      // => maybe let the ROUTE state what it needs instead
      // => if necessary, grant permissions to routes
  }
  // sets this._read under the hood
  // push data onto the read queue, passing null
  // will signal the end of the stream (EOF)
  if (!router$) {
    console.log('==============================')
    console.log('STATUS: ', 'Initialize router$')
    console.log('==============================')
    router$ = new stream.Readable({ objectMode: true })
    router$._read = function () { }
    var router = routes()
    // @HACK @TODO @XXX here the components get their engine$
    urlRouting(router, db, { push: push }) // activates all routes

    var opts = {} // e.g. saving of scrollX & scrollY for each route
    catchlinks(WINDOW, singlepage(pagehandler, opts))
  }

  return router$
}
/***********************************************************************
  HELPER - push
***********************************************************************/
function push (vtree) { router$.push(vtree) }
///////////////////////////////////////////////////////////////////////////////
/*

 THOUGHTS:
   - maybe the router should replace "index.js"
   - maybe router should be the main entry point
   - router gets initialized with location.href or root "/"
   - then handles all the updates by piping the
     - root component for a route to the engine$
*/
// STANDARD INTERFACE ???
// module.exports = function (req, res, params) {
//     res.end('beep boop\n')
// }
// and then in the server.js I can do:
// => router.addRoute('/whatever', require('./lib/someroute.js'));
// VS.
// state && state.route // IN COMBINATION WITH:
// // e.g.
// ./SOURCE/node_modules/_router/index.js
// ./SOURCE/node_modules/_router/someroute.js
// ./SOURCE/node_modules/_router/...
// module.exports = function (msg) {
//     return function (req, res, params) {
//         res.end(msg + '\n')
//     }
// }
// and then in server.js:
// => router.addRoute('/whatever', require('./lib/someroute.js')('beep boop'))
