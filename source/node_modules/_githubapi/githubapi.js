'use strict'
var minixhr = require('minixhr')
var padleft = require('pad-left')
var type = require('component-type')
var qery = require('qery')
var murl = require('murl')
var jmm = require('json-meta-marked')
var virtualhtml = require('virtual-html')
var vdomserialize = require('vdom-serialize')
/******************************************************************************
  CUSTOM

    @TODO: there needs to be a playground for exploring API's manually before
           wiring them up to meaningful "petkey's" in the context of current app

    @XXX: if it was switchboard already - a listener to db was enough
          the ajax updates would come in at a central location in code
          and listeners would be notified
    @TODO: crappy keys go away by using component prefixed db's everywhere
    @TODO: a mapping is required, from external world/api key's to
           internal world/pet key's
     thus: "host"+"pathname"+"params" => "petname"+(?query params?)
******************************************************************************/
var STATUS = {
  200: success,
  304: unchanged,
  401: unauthorized,
  403: notAvailable,
  404: notFound
}
// var LANGUAGE = 'rs'
var LANGUAGE = 'en'
var UP2DATE = false
/*****************************************************************************/
var esova = (function service (pattern) {
  return function api (realkey, params, next) {
    // @TODO: support POST
    var key = params.key
    var id = params.id
    if (key && !id) next(new Error('"lesson" requires "id" too'))
    var querystring = qery({ 'id': id, 'last_lesson': key })
    var hostpath = pattern({ realkey: realkey })
    var url = hostpath + querystring
    var request = { url: url, method: key ? 'POST' : 'GET' }
    next(null, request)
  }
}(murl('https://wizardamigos.herokuapp.com/{realkey}')))
/*****************************************************************************/
var github = (function service (pattern, UNDEFINED) {
  return function api (realkey, params, next) {
    var etag = params.etag
    var token = params.token
    var querystring = qery({ 'access_token': token })
    var hostpath = pattern({ realkey: realkey })
    var url = hostpath + querystring
    var headers =  etag ? { headers: { 'If-None-Match': etag } } : UNDEFINED
    var request =  { url: url, method: 'GET' }
    if (headers) request.headers = headers
    next(null, request)
  }
}(murl('https://raw.githubusercontent.com/wizardamigosinstitute/service/master/curriculum{realkey}')))
/*****************************************************************************/
var CONTEXT = {
  'getlessondescription': { // petaction
    PETBASE: murl('/data/{language}/lesson/{number}/description'),
    REALBASE: murl('/lesson{number}/description.{language}.md'),
    realkey2petkey: function realkey2petkey (realkey, next) {
      // next(null,this.PETBASE+(+realkey.split(this.REALBASE)[1]))
    }, // realapi2petapi
    petkey2realkey: function petkey2realkey (petkey, next) {
      // next(null,this.REALBASE+padleft(petkey.split(this.PETBASE)[1],3,'0'))
    }, // petapi2realapi
    translate: getLessonKey, // ??? translator === petAction2realAction ???
    getPetKey: function (key, next) {
      next(null, this.PETBASE({number:key, language: LANGUAGE}))
    },
    getRealKey:function(key,next){
      next(null,this.REALBASE({number:padleft(key,3,'0'), language: LANGUAGE}))
    },
    // getActionCredentials // // @IDEA: retrieves token or allowance for action
    realAction: getGithubData
  },
  'getlessonNumber': { // petaction
    PETBASE: murl('esova-currentLesson'),
    REALBASE: murl('/last_lesson'),
    realkey2petkey: function realkey2petkey (realkey, next) {
      // next(null,this.PETBASE+(+realkey.split(this.REALBASE)[1]))
    }, // realapi2petapi
    petkey2realkey: function petkey2realkey (petkey, next) {
      // next(null,this.REALBASE+padleft(petkey.split(this.PETBASE)[1],3,'0'))
    }, // petapi2realapi
    translate: getLessonKey, // ??? translator === petAction2realAction ???
    getPetKey: function (key, next) {
      next(null, this.PETBASE())
    },
    getRealKey:function(key,next){
      next(null,this.REALBASE())
    },
    // getActionCredentials // // @IDEA: retrieves token or allowance for action
    realAction: getEsovaData
  },
  'getLessonContent': { // petaction
    PETBASE: murl('/data/{language}/lesson/{number}/slides'),
    REALBASE: murl('/lesson{number}/slides.{language}.json'),
    realkey2petkey: function realkey2petkey (realkey, next) {
      // next(null,this.PETBASE+(+realkey.split(this.REALBASE)[1]))
    }, // realapi2petapi
    petkey2realkey: function petkey2realkey (petkey, next) {
      // next(null,this.REALBASE+padleft(petkey.split(this.PETBASE)[1],3,'0'))
    }, // petapi2realapi
    translate: getLessonKey, // ??? translator === petAction2realAction ???
    getPetKey: function (key, next) {
      next(null, this.PETBASE({number:key, language: LANGUAGE}))
    },
    getRealKey:function(key,next){
      next(null,this.REALBASE({number:padleft(key,3,'0'), language: LANGUAGE}))
    },
    // getActionCredentials // // @IDEA: retrieves token or allowance for action
    realAction: getGithubData
  }
}
/******************************************************************************
  MAIN

  @IDEA:
    - Have a spot to integrate all IO<->db
    - Wireup by connecting different API Providers serving via different tech
      - e.g. websocket, webrtc, ajax, sensors?, ...
    - listen for db.get requests, thus at least "initial subscribes"
      - e.g. db.track(...)
    - put data to db whenever updates arrive

    USE CASES / SCENARIOS:
      - @IDEA: when not new data arrived, thus no "notify" dispatched,
        - => cached value is still up2date
      - getCurrentLesson when rendering lesson page
      - getToken to signin
      - @TODO: ... fine more examples ...

******************************************************************************/
module.exports = githubapi

function githubapi (db) {
  // @TODO: this is bad, because contrary to components, this should be a singleton
  db.on('put', function (key, value) {
    try { value = JSON.parse(value) } catch (e) { value = {} }

    if (key === 'esova-credentials') {
      var status = value.status
      if (status === 'logout')  {
        UP2DATE = false
      }
    }
  })
  return function api (petaction, callback) { execute(db, petaction, callback) }
}
/******************************************************************************
  HELPER - getEsovaData
******************************************************************************/
function getEsovaData (db, petkey, realkey, next/*(error, lesson)*/) {
  getLessonKey (db, next/*(error, lessonKey)*/)
}
/******************************************************************************
  HELPER - getLessonKey
******************************************************************************/
function getLessonKey (db, next/*(error, lessonKey)*/) {
  var realkey = 'last_lesson'
  db.get('esova-credentials', function (error, creds) {
    try { creds = JSON.parse(creds) } catch (e) { creds = {} }
    if (!(creds||{}).id) db.get('esova-currentLesson', function (error, lastlesson) {
      if (error) db.put('esova-currentLesson', '0', function (error) {
        if (error) next(new Error('couldnt initialize lesson store'))
        else db.get('esova-lesson', function (error, currentlesson) {
          if (error) db.put('esova-lesson', '0', function (error) {
            if (error) next(new Error('couldnt initialize lesson store2'))
            else next(null, '0')
          })
        })
      })
      else db.get('esova-lesson', function (error, currentlesson) {
        if (error) db.put('esova-lesson', lastlesson, function (error) {
          if (error) next(new Error('couldnt initialize lesson store3'))
          else next(null, lastlesson)
        })
        else next(null, currentlesson)
      })
    })
    else db.get('esova-currentLesson', function (error, lastlesson) {
      var ID = creds.id
      if (error) db.get('esova-lesson', function (error, currentlesson) {
        if (error) esova(realkey, {id:ID}, function (error, request) {
          if (error) next(new Error('lesson request failed'))
          else minixhr(request, (function (timedout) {
            var id = setTimeout(function timeout (error) {
              timedout = true
              next(error)
            }, 2500, new Error('lesson request timedout'))
            return function save (data/*, response, xhr, headers*/) {
              if (timedout) return console.error('request came in, but was slow')
              clearTimeout(id)
              if ( data.length > 100) next('lesson request remote server error')
              else db.put('esova-currentLesson', data, function (error) {
                if (error) next(new Error('couldnt save to lesson store'))
                else db.put('esova-lesson', data, function (error) {
                  if (error) next(new Error('couldnt save to lesson store2'))
                  else next(null, data)
                })
              })
            }
          }()))
        })
        else (
          next(null, currentlesson),
          esova(realkey, {id:ID}, function (error, request) {
            if (error) next(new Error('lesson request failed'))
            else minixhr(request, (function (timedout) {
              var id = setTimeout(function timeout (error) {
                timedout = true
                next(error)
              }, 2500, new Error('lesson request timedout'))
              return function save (data/*, response, xhr, headers*/) {
                if (timedout) return console.error('request came in, but was slow')
                clearTimeout(id)
                if ( data.length > 100) next('lesson request remote server error')
                else db.put('esova-currentLesson', data, function (error) {
                  if (error) next(new Error('couldnt save to lesson store'))
                  else db.put('esova-lesson', data, function (error) {
                    if (error) next(new Error('couldnt save to lesson store2'))
                    else next(null, data)
                  })
                })
              }
            }()))
          })
        )
      })
      else {
        if (UP2DATE) {
          db.get('esova-lesson', function (error, currentlesson) {
            if (error) db.put('esova-lesson', lastlesson, function (error) {
              if (error) next(new Error('couldnt save to lesson store4'))
              else next(null, lastlesson)
            })
            else next(null, currentlesson) // local cached is "THE TRUTH"
          })
        } else {
          esova(realkey, {id:ID}, function (error, request) {
            if (error) next(new Error('lesson request failed'))
            else minixhr(request, (function (timedout) {
              var id = setTimeout(function timeout (error) {
                timedout = true
                next(error)
              }, 2500, new Error('lesson request timedout'))
              return function save (data/*, response, xhr, headers*/) {
                if (timedout) return console.error('request came in, but was slow')
                clearTimeout(id)
                if ( data.length > 100) next('lesson request remote server error')
                else {
                  db.put('esova-currentLesson', data, function (error) {
                    if (data === 'null' || data === '') {
                      var defaultLesson = '0'
                      // CASE: signup for first time return's "null" => set to "5"
                      var url = 'https://wizardamigos.herokuapp.com/last_lesson'
                      minixhr({
                        url: url+'?id='+ID+'&last_lesson=' + defaultLesson,
                        method: 'POST'
                      })
                      function noop () {}
                      db.put('esova-currentLesson', defaultLesson, noop)
                      db.put('esova-lesson', defaultLesson, noop)
                      data = defaultLesson
                    }
                    if (error) next(new Error('couldnt save to lesson store'))
                    else db.put('esova-lesson', data, function (error) {
                      if (error) next(new Error('couldnt store lesson'))
                      else next(null, data)
                    })
                  })
                }
              }
            }()))
          })
          UP2DATE = true
        }
      }
    })
  })
}
/******************************************************************************
  HELPER - isInvalid
******************************************************************************/
function isInvalid (context) {
  return !(context &&
    type(context.PETBASE) === 'function' &&
    type(context.REALBASE) === 'function' &&
    type(context.translate) === 'function' &&
    type(context.getPetKey) === 'function' &&
    type(context.getRealKey) === 'function' &&
    type(context.realAction) === 'function')
}
/******************************************************************************
  HELPER - execute
******************************************************************************/
// @TODO rewrite using http://calbackhell.com information
function execute (db, petaction, next/*(error, result)*/) {
  var CON = CONTEXT[petaction]
  if(isInvalid(CON)) next(new Error('no valid pet action given'))
  else CON.translate(db, function (error, key) {
    if (error) next(error)
    else CON.getRealKey(key, function (error, realkey) {
      if (error) next(error)
      else CON.getPetKey(key, function (error, petkey) {
        if (error) next(error)
        else CON.realAction(db, petkey, realkey, function (error, lesson) {
          if (error) next(error)
          else next(null, lesson)
        })
      })
    })
  })
}
/******************************************************************************
  HELPER - getGithubData
******************************************************************************/
function getGithubData (db, petkey, realkey, next/*(error, lesson)*/) {
  db.get(petkey, function (err, cache) {
    db.get('esova-credentials', function (error, creds) {
      var c = cache ? JSON.parse(cache) : {}
      creds = creds ? JSON.parse(creds) : {}
      if (err) {
        // GET "lesson" anonymously or with token
        !creds.token ? req(c,{}) : req(c,{token:creds.token})
      } else {
        // CHECK for "lesson updates" using etag anonymously or with token
        !(creds||{}).token ? req(c,{etag:cache.ETag}) : req(c,{token:creds.token,etag:cache.ETag})
      }
    })
  })
  function req (cache, params) {
    github(realkey, params, function (error, request) {
      if (error) cache.data ? next(null, cache.data) : next(error)
      else minixhr(request, makeHandler(db,petkey,cache,function (error,data) {
        if (error) cache.data ? next(null, cache.data) : next(error)
        else next(null, data)
      }))
    })
  }
}
/******************************************************************************
  HELPER - makeHandler
******************************************************************************/
function makeHandler (db, petkey, cache, callback) {
  var cData = cache ? cache.data : undefined
  return function handler (data, _, xhr, header) {
    var status = (xhr||{}).status
    var handle = STATUS[status]
    if (!handle) handle = internalError
    if (header) printRemaining(header)
    handle(db, status, petkey, cData, data, header, callback)
  }
}
/******************************************************************************
  HELPER - printRemaining
******************************************************************************/
function printRemaining (header) {
  var left  = +header["X-RateLimit-Remaining"]
  var total = +header["X-RateLimit-Limit"]
  var msg   = 'Remaining Requests: ' + left + '/' + total
  console.error(msg)
}
/******************************************************************************
  200: success
******************************************************************************/
function success (db, __, petkey, ____, data, header, cb) {
  var contentType = 'unknown'
  if (data) {
    try {
      data = JSON.parse(data)
      contentType = 'json'
    }
    catch (e) {
      try {
        contentType = 'jmm'
      }
      catch (e) { }
    }
    if (contentType === 'jmm') {
      data = jmm.parse(data)
      var content = data.__content__
      content = '<div>' + content + '</div>'
      virtualhtml(content, function (error, lessonContent) {
        if (error) db.put('ERROR', 'couldnt render lesson description MD')
      else {
          data = {
            title: data.title,
            duration: data.duration,
            content: vdomserialize(lessonContent)
          }
          var value = JSON.stringify({ ETag : header.ETag, data : data })
          db.put(petkey, value, function (error) {
            if (error) cb(error, null)
            else cb(null, data)
          })
        }
      })
    } else if (contentType = 'json') {
      var value = JSON.stringify({ ETag : header.ETag, data : data })
      db.put(petkey, value, function (error) {
        if (error) cb(error, null)
        else cb(null, data)
      })
    } else { //  contentType === 'unknown'
      db.put('ERROR', data)
    }
  } else cb(null, data)
}
// function b64_to_utf8 ( str ) {
//   str = str.replace(/(\r\n|\n|\r)/gm,"");
//   return decodeURIComponent(escape(window.atob( str )));
// }
/******************************************************************************
  304: unchanged
******************************************************************************/
function unchanged (db, __, ___, cachedData, ____, _____, cb) {
  var data = cachedData
  var contentType = 'unknown'
  if (data) {
    try {
      data = JSON.parse(data)
      contentType = 'json'
    }
    catch (e) { }
    if (contentType = 'json') {
      cb(null, data)
    } else { //  contentType === 'unknown'
      db.put('ERROR', data)
    }
  } else cb(null, data)
}
/******************************************************************************
  401: unauthorized
******************************************************************************/
function unauthorized (db, status, _, __, ___, ____, callback) {
  var e = new Error('status: '+status+' (auth token invalid)')
  e.status = status
  callback(e)
}
/******************************************************************************
  404: notFound
******************************************************************************/
function notFound (db, status, _, __, ___, ____, callback) {
  var e = new Error('status: '+status+' (not found)')
  e.status = status
  callback(e)
}
/******************************************************************************
  403: notAvailable
******************************************************************************/
function notAvailable (db, status, _, __, ___, ____, callback) {
  var e = new Error('status: '+status+' (not available)')
  e.msg = 'Service temporarily not available - try again in one hour'
  e.status = status
  callback(e)
}
/******************************************************************************
  ???/500: internalError
******************************************************************************/
function internalError (db, status, _, __, ___, ____, callback) {
  var e = new Error('status: '+status||500+' (Internal Error)')
  e.status = status
  callback(e)
}
