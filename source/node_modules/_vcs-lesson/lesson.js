'use strict'
/******************************************************************************
  STACK BASE
******************************************************************************/
var { h, hsvg } = require('_h')
var s           = require('_s')
var bel         = require('bel')
/******************************************************************************
  STACK EXTEND
******************************************************************************/
var path        = require('path')
var urify       = require('urify')
var defined     = require('defined')
var after       = require('after')
var minixhr     = require('minixhr')
/******************************************************************************
  CUSTOM
******************************************************************************/
var video       = require('_vcs-videoplayer')
var githubapi   = require('_githubapi')
/******************************************************************************
  ASSETS
******************************************************************************/
var chathelp    = urify(path.join(__dirname, 'chathelp.png'))
var playagain   = urify(path.join(__dirname, 'playagain.png'))
var finish      = urify(path.join(__dirname, 'finish.png'))
/******************************************************************************
  MAIN
******************************************************************************/
module.exports    = LessonComponent

function LessonComponent (db, engine) {


  /*****************************/
  // THEME + LOCAL CACHE + DEFAULT VALUES
  var esovalightgreen = '#35E38A'
  var esovagreen = '#35E38A'
  var esovadarkgreen = '#32A971'
  var esovalightblue = '#6f68ae'
  var esovablue = '#43409a'
  var esovadarkblue = '#16243a'
  var lightbluegrey = '#D6DBE1'
  var esovaorange = '#FA9B68'
  var esovared = 'FA9B68'
  var esovapink = '#E44663'
  var esovapurple = '#9d267a'
  var esovalightpurple = '#cc8fba'
  var esovafont1 = 'Avenir Roman'

  var FREE_LESSONS  = -1
  var STATUS = {
    video: undefined,
    slides: [],
    answers: [],
    chaturl: 'https://gitter.im/wizardamigosinstitute/program/'
  }


  /*****************************/
  // INITIALIZE STYLING - @TODO: maybe styling initialization is harmless
  var x = s(`
    lesson {
      position: relative;
      background: linear-gradient(to bottom, ${'#223857'} 0%,${esovablue} 100%);
      display: flex;
      flex-direction: column;
      align-items: center;
      justify-content: center;
      width: 100%;
      min-height: 100%;
      overflow: hidden;
    }
    lesson-bottom {
      position: absolute;
      width: 100%;
      min-height: 100%;
      box-shadow: 0px 110px 35px 100px hsla(0, 0%, 0%, 0.75);
      background: linear-gradient(to bottom, rgba(219,219,219,0.1) 0%, rgba(254,254,254,0.1) 0%, rgba(226,226,226,0.3) 90%, rgba(209,209,209,0.3) 100%);
      z-index: 1;
    }
    close-button {
      position: absolute;
      right: 10px;
      top: 10px;
      width: 75px;
      background-color: ${esovapink};
      color: white;
      font-size: 18px;
      border-radius: 15px;
      border: 0;
      font-family: ${esovafont1};
      cursor: pointer;
      z-index: 1;
    }
    video-container {
      background-color: black;
      position: relative;
      min-width: 600px;
      min-height: 340px;
      width: 59.9vw;

      height: 34vw;
      height: calc(100vh - 330px);

      z-index: 2;
    }
    videopopup {
      display: flex;
      flex-direction: column;
      justify-content: center;
      align-items: center;
      position: relative;
      margin: 0 auto;
      min-width: 600px;
      min-height: 340px;
      width: 60vw;

      height: 34vw;
      height: 100%;
      margin-top: 165px;
      margin-bottom: 165px;

      z-index: 3;
      color: ${esovalightgreen};
      font-family: ${esovafont1};
    }
    video-background {
      top: 0;
      left: 0;
      position: absolute;
      width: 100%;
      height: 100%;
      background-color: ${esovadarkblue};
      opacity: 0.98;
      z-index: -1;
    }
    videopopup-question {
      display: flex;
      width: 100%;
      height: 100%;
      flex-direction: column;
      align-items: center;
      justify-content: space-around;
    }
    videopopup-solution {
      display: flex;
      width: 100%;
      height: 100%;
      flex-direction: column;
      align-items: center;
      justify-content: space-around;
    }
    videopopup-challenge {
      display: flex;
      width: 100%;
      flex-direction: column;
      align-items: center;
      justify-content: space-around;
    }
    number {
      display: flex;
      justify-content: center;
      align-items: center;
      border: 2px solid white;
      height: 50px;
      width: 50px;
      border-radius: 50%;
      color: white;
      font-size: 20px;
    }
    question {
      padding: 30px 0 30px 0;
      width: 80%;
      font-size: 14px;
      white-space: pre-wrap;
      border-bottom: 2px solid ${esovalightgreen};
    }
    questionline {
      white-space: pre-wrap;
    }
    answers {
      margin-top: 25px;
      display: flex;
      font-size: 14px;
      width: 80%;
      justify-content: space-around;
      flex-flow: row wrap;
    }
    option {
      box-sizing: border-box;
      display: flex;
      width: 34%;
      flex-direction: row;
      flex-wrap: nowrap;
    }
    optioncheckbox {
      min-width: 15px;
      font-size: 14px;
    }
    optionanswer {
      padding-left: 5px;
      color: white;
    }
    submit {
      margin-top: 45px;
      border: 1px solid ${esovalightgreen};
      border-radius: 15px;
      padding: 3px 15px;
      font-family: Avenir Roman;
      color: ${esovalightgreen};
      cursor: pointer;
    }
    challenge {
      padding: 30px 0 30px 0;
      width: 80%;
      color: white;
      text-align: center;
      border-bottom: 2px solid ${esovalightgreen};
    }
    click {
      margin-top: 95px;
      border: 1px solid ${esovalightgreen};
      border-radius: 15px;
      padding: 3px 15px;
      font-family: Avenir Roman;
      color: ${esovalightgreen};
      cursor: pointer;
    }
    smallprint {
      margin-top: 7px;
      font-size: 14px;
      color: white;
      opacity: 0.4;
    }
    challenge-notification {
      display: flex;
      justify-content: center;
      align-items: center;
      width: 100%;
      height: 100%;
      opacity: 0.98;
    }
    bravo-notification {
      background-color: ${esovalightgreen};
      cursor: pointer;
    }
    tryagain-notification {
      background-color: ${esovared};
      cursor: pointer;
    }
    bravo-image {
      display: block;
    }
    tryagain-image {
      display: block;
    }
    buttons {
      display: flex;
      width: 80%;
      font-family: Avenir Roman;
    }
    button {
      display: flex;
      flex-flow: row wrap;
      justify-content: center;
      margin: 30px;
    }
    button-icon {
      cursor: pointer;
    }
    button-text {
      color: white;
      opacity: 0.1;
      font-size: 14px;
      width: 100px;
      text-align: center;
    }
  `)

  /*****************************/
  // CHILD COMPONENTS & USED MODULES
  var api = githubapi(db)


  /*****************************/
  // RENDER COMPONENT
  function renderLesson () {
    // MAYBE UPDATE CHILDREN
    // ---

    // SELECT CHILDREN
    // ---

    // PREPARE
    // RENDER
    var vtree = h('div', { className: x('lesson') }, [
      h('div', { className: x('video-container') }, [
        h('button', {
          className: x('close-button'),
          onclick: function (event) {
            clearTimeout(STATUS.slideID)
            db.put('MODE', 'skillbox', ER)
          }
        }, 'x'),
        video({}, function cb (playerAPI, state) {
          playerAPI.addEventListener('onStateChange', function (event) {
            console.log('STATE CHANGE', event.data, state.ENDED)
            if (event.data === state.ENDED) {
                console.log('THE END')
                var tasks = STATUS.slides.length
                if (tasks === STATUS.solved) {
                  console.log('BRAVO - Lesson Successful')
                  db.get('esova-currentLesson', function (error, lesson) {
                    if (STATUS.lesson === lesson && lesson !== '4') {
                      var newlesson = (+STATUS.lesson+1)+''
                      db.put('esova-currentLesson', newlesson, function (error) {
                        if (error) ER(error)
                        else db.put('esova-lesson', newlesson, function (err) {
                          if (err) ER(err)
                          else {
                            db.put('MODE', 'skillbox', ER)
                            if (+newlesson > FREE_LESSONS ) {
                              updatebackend(newlesson)
                            }
                          }
                        })
                      })
                    } else db.put('MODE', 'skillbox', ER)
                  })
                } else {
                  console.log('TRYAGAIN - Lesson Unsuccessful')
                  db.put('MODE', 'skillbox', ER)
                }
            }
          })

          playerAPI.addEventListener('onSecondChange', function (sec) {
            var currentsecond = Math.floor(sec)
            STATUS.currentsecond = currentsecond
            var minute = Math.floor(currentsecond/60)
            var second = currentsecond % 60
            if ((second+'').length === 1) second = '0'+second
            var timekey = minute+':'+second
            var slides = STATUS.times[timekey]
            if (slides) {
              slides = slides.slice(0)
               playerAPI.pauseVideo()
              var slide = slides.shift()
              show(slide, STATUS.lesson||'0', function next () {
                var slide = slides.shift()
                if (slide) show(slide, STATUS.lesson||'0', next)
                else {
                  engine.push({
                    type: 'vtree',
                    key: 'videopopup',
                    value: ''
                  })
                  playerAPI.playVideo()
                }
              })
            }
          })

          playerAPI.loadVideoById({
            videoId           : STATUS.video,
            startSeconds      : 0,
            suggestedQuality  : "large"
            // highres, hd1080, hd720, large, medium and small
          })
          // playerAPI.setSize(640, 390) // (width:Number, height:Number)
          playerAPI.playVideo()
          //-------------------------------------------------------------
        })
      ]),
      h('div', { className: x('lesson-bottom') })
    ])
    // PUSH UPDATE
    engine.push({
      type: 'vtree',
      key: 'lesson',
      value: vtree
    })
  }


  /*****************************/
  // INCOMING COMMUNICATION CHANNELS
  db.on('put', function (key, value) {
    try { value = JSON.parse(value) } catch (e) { value = defined(value, {}) }

    if (key === 'MODE') {
      if (value === 'lesson') {
        helper() // fetch lesson content into "esova-lessonContent"
      }
      else { // clear lesson popup
        engine.push({
          type: 'vtree',
          key: 'videopopup',
          value: ''
        })
      }
    }
    else if (key === 'esova-lessonContent') {

      STATUS.video = value.video
      STATUS.slides = value.slides
      STATUS.times = {}
      STATUS.slides.forEach(function (slide) {
        var time = slide.time
        STATUS.times[time] = STATUS.times[time] || []
        STATUS.times[time].push(slide)
      })
      STATUS.currentsecond = 0
      STATUS.solved = 0
      db.get('esova-lesson', function (error, lesson) {
        STATUS.lesson = lesson
        renderLesson()
      })
    }
  })


  /*****************************/
  // INITIALIZE - @TODO: maybe initialization should always be triggered
  console.log('--------------------------------')
  console.log('INITIALIZE: lesson() component')
  console.log('--------------------------------')
  // @TODO: switchboarded db should recognize all automatically
  var LOCALE = {
    'text/lesson/slide/bravo.image': '',
    'text/lesson/slide/tryagain.image': '',
    'text/lesson/slide/button/repeat': '',
    'text/lesson/slide/button/chatSupport': '',
    'text/lesson/slide/question/submit': '',
    'text/lesson/slide/challenge/smallprint': '',
    'text/lesson/slide/button/challenge': '',
    'text/lesson/slide/bravo': '',
    'text/lesson/slide/tryagain': ''
  }
  var FIELDS = Object.keys(LOCALE).length
  var init = after(FIELDS, function (err) {
    if (err) db.put('ERROR', err)
    else {
      renderHeader()
      init = renderHeader
    }
  })
  db.on('put', function (key, value) {
    try { value = JSON.parse(value) } catch (e) { value = defined(value, {}) }

    if (LOCALE[key] !== undefined) {
      LOCALE[key] = value
      init()
    }
  })


  /*****************************/
  // HELPER
  function helper () {
    api('getLessonContent', function (error, content) {
      if ((error||{}).status === 401)
        db.put('ERROR', 'api getlessondescription 401 access denied', ER)
      else db.put('esova-lessonContent', content, function (error) {
        if (error) db.put('ERROR', new Error('couldnt set lesson content'))
      })
    })
  }
  function ER (error) {
    // @TODO
    // default error logging failed
    // => try to learn about error via ajax or some other technique
    // => if it fails inform user instead and hope he reports it in chat
    if (error) {
      console.error('couldnt store ERROR event')
      console.error(error)
    }
  }

  var TYPE = {
    'question': renderQuestion,
    'challenge': renderChallenge,
    'solution': renderSolution
  }

  function show (slide, lesson, next) {
    TYPE[slide.type](slide, lesson, render, next)
  }
  function render (vtree) {
    engine.push({
      type: 'vtree',
      key: 'videopopup',
      value: h('div', { className: x('videopopup') }, [
        h('div', { className: x('video-background') }),
        vtree
      ])
    })
  }
  function renderQuestion (slide, lesson, render, next) {
    var vtree = h('div', { className: x('videopopup-question')}, [
      h('div', { className: x('number')}, [lesson] ),
      h('div', { className: x('question')}, [].concat(slide.question)
        .map(line => line+'\n')
      ),
      h('div', { className: x('answers')},
        slide.options.map(function (option, idx) {
          return h('div', { className: x('option') }, [
            h('input', {
              type: 'checkbox',
              name: 'option'+idx,
              className: x('optioncheckbox'),
              value: option,
              onclick: selectoption
            }),
            h('div', { className: x('optionanswer') }, [option])
          ])
        })
      ),
      h('div', {
        className: x('submit'),
        onclick: evaluate.bind(arguments)
      }, [
        LOCALE['text/lesson/slide/question/submit']
      ])
    ])
    render(vtree)
  }
  function selectoption (event) {
    var answer = event.target.value
    if (event.target.checked) {
      STATUS.answers.push(answer)
    } else {
      var index = STATUS.answers.indexOf(answer)
      if (index > -1) STATUS.answers.splice(index, 1)
    }
  }
  function evaluate (event) {
    event.preventDefault()
    var slide = this[0]
    var correctAnswers = slide.answer.map(x => slide.options[x])
    var isCorrect = correctAnswers.reduce(check, true)
    function check (isCorrect, validAnswer) {
      var x = STATUS.answers.indexOf(validAnswer) !== -1
      return isCorrect && x
    }
    isCorrect = isCorrect && correctAnswers.length === STATUS.answers.length
    STATUS.answers = []
    if (isCorrect) {
      renderBravo.apply(undefined, this)
    } else {
      renderTryAgain.apply(undefined, this)
    }
  }

  function renderChallenge (slide, lesson, render, next) {
    var vtree = h('div', { className: x('videopopup-challenge') }, [
      h('div', { className: x('number') }, [lesson] ),
      h('div', { className: x('challenge') }, [slide.text] ),
      h('div', {
        className: x('click'),
        onclick: +lesson !== FREE_LESSONS ? function (event) {
          window.open(slide.link.url, '_blank')
          window.onfocus = function () {
            renderBravo(slide, lesson, render, next)
            window.onfocus = undefined
          }
        } : function (event) {
          event.preventDefault()
          db.put('MODE', 'skillbox', function (error) {
            var st = JSON.stringify({ status: 'ok' })
            db.put('esova-credentials', st, ER)
            function noop () {}
            db.put('esova-currentLesson', '5', noop)
            db.put('esova-lesson', '5', noop)
          })
        }
      }, [
        LOCALE['text/lesson/slide/button/challenge']
      ]),
      h('div', { className: x('smallprint') }, [
        LOCALE['text/lesson/slide/challenge/smallprint']
      ])
    ])
    render(vtree)
  }

  function renderBravo (slide, lesson, render, next) {
    // if (slide.type === 'question' || slide.type === 'challenge') {
    //
    // }
    STATUS.solved += 1
    doBravo()

    function doBravo () {
      STATUS.slideID = setTimeout(next, 2000)
      var vtree = h('div', {
        className: x('challenge-notification','bravo-notification'),
        onclick: function (event) {
          if (event.target === this) {
            clearTimeout(  STATUS.slideID)
            next()
          }
        }
      }, [
        h('img', {
          src: LOCALE['text/lesson/slide/bravo.image'],
          className: x('bravo-image'),
          onclick: function (event) {
            if (event.target === this) {
              clearTimeout(  STATUS.slideID)
              next()
            }
          }
        })
      ])
      render(vtree)
    }
  }

  function renderSolution (slide, lesson, render, next) {
    var vtree = h('div', { className: x('videopopup-solution')}, [
      h('div', { className: x('number')}, ['!'] ),
      h('div', { className: x('challenge')}, [slide.text] ),
      h('div', { className: x('buttons')}, [
        h('div', {
          className: x('button')
        }, [
          h('img', {
            src: chathelp, className: x('button-icon'),
            onclick: function (event) {
              window.open(STATUS.chaturl, '_blank')
            }
          }),
          h('div', { className: x('button-text')}, [
            LOCALE['text/lesson/slide/button/chatSupport']
          ])
        ]),
        h('div', {
          className: x('button')
        }, [
          h('img', {
            src: playagain, className: x('button-icon'),
            onclick: function (event) {
              db.put('MODE', 'lesson', ER)
              engine.push({
                type: 'vtree',
                key: 'videopopup',
                value: ''
              })
            }
        }),
          h('div', { className: x('button-text')}, [
            LOCALE['text/lesson/slide/button/repeat']
          ])
        ]),
        h('div', {
          className: x('button')
        }, [
          h('img', {
            src: finish, className: x('button-icon'),
            onclick: function (event) {
              renderBravo(slide, lesson, render, next)
            }
          }),
          h('div', { className: x('button-text')}, [slide.button] )
        ])
      ] )
    ])
    render(vtree)
  }

  function renderTryAgain (slide, lesson, render, next) {
    var id = setTimeout(show, 2000, slide, lesson, next)
    var vtree = h('div', {
      className: x('challenge-notification', 'tryagain-notification'),
      onclick: function (event) {
        if (event.target === this) {
          clearTimeout(id)
          show(slide, lesson, next)
        }
      }
    }, [
      h('img', {
        src: LOCALE['text/lesson/slide/tryagain.image'],
        className: x('tryagain-image'),
        onclick: function (event) {
          if (event.target === this) {
            clearTimeout(id)
            show(slide, lesson, next)
          }
        }
      })
    ])
    render(vtree)
  }

  function updatebackend (lessonnumber) {
    // @TODO: setting "esova-currentLesson" should be listened to by githubapi.js
    db.get('esova-credentials', function (error, creds) {
      if (error) ER(error)
      else {
        var url = 'https://wizardamigos.herokuapp.com/last_lesson'
        var id = JSON.parse(creds).id
        minixhr({
          url: url+'?id='+id+'&last_lesson='+lessonnumber,
          method: 'POST'
        })
      }
    })
  }

}
